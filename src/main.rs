extern crate libc;

mod jit;
use jit::mem::JitMemory;

fn main() {
    println!("Welcome to jitterbug!");

    let mut jit = JitMemory::new(1);

   let ops : &[u8] = &[ 0x48, 0xC7, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC7, 0x01, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC6, 0x4B, 0x4F, 0x00, 0x00, 0x48, 0xC7, 0xC2, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x05, 0x48, 0xC7, 0xC0, 0x00, 0x00, 0x00, 0x00 ];
   for op in ops {
       jit.put(*op);
   }

    let jit_func = jit.as_fn();
    println!("Jit program executed with: {}", jit_func());
}

pub fn write_test_op(mem : JitMemory, data_ptr : *u8) {
    let mov_rax_1 = [ 0x48, 0xC7, 0xC0, 0x01, 0x00, 0x00, 0x00 ];
    let mov_rdi_1 = [ 0x48, 0xC7, 0xC7, 0x01, 0x00, 0x00, 0x00 ];
    let mov_rsi = [  ]
}
